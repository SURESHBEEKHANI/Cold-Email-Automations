import streamlit as st
from langchain_community.document_loaders import WebBaseLoader
from chains import Chain
from portfolio import Portfolio
from utils import clean_text

# Configure the Streamlit page
st.set_page_config(
    layout="wide",  # Use a wide layout
    page_title="Cloud Email Generator",  # Set the page title
    page_icon="ðŸ“§"  # Set the page icon
)

def sidebar():
    """
    Sets up the sidebar with a logo, title, description, and step-by-step guide.
    """
    # Display the logo
    st.sidebar.image(
        r'imgs/img.png',  # Path to the logo image
        use_column_width=True
    )

    # Add a centered title with custom HTML and CSS
    st.sidebar.markdown(""" 
        <style>
        .sidebar-title {
            text-align: center;
            font-size: 34px;
            font-weight: bold;
        }
        </style>
        <div class="sidebar-title">
            Cloud Email Generator
        </div>
        """, unsafe_allow_html=True)

    # Add a description and step-by-step guide
    st.sidebar.markdown(""" 
        <style>
        .sidebar-description {
            text-align: center;
            font-size: 20px;
            margin-top: 20px;
        }
        .sidebar-steps {
            text-align: left;
            font-size: 18px;
            margin-top: 20px;
            line-height: 1.6;
        }
        </style>
        <div class="sidebar-description">
            This tool helps you generate personalized cold emails quickly and effectively. 
            Input your details, and let the AI do the rest, crafting compelling messages 
            tailored to your needs.
        </div>
        <div class="sidebar-steps">
            <h3>How It Works:</h3>
            <ol>
                <li><strong>Provide Details:</strong> Enter a valid URL or a job description into the input field.</li>
                <li><strong>Processing:</strong> The tool will load and process the information, cleaning and extracting key details.</li>
                <li><strong>AI Analysis:</strong> The AI will analyze the extracted details and generate a list of relevant job postings.</li>
                <li><strong>Skill Matching:</strong> The tool will match required skills with your portfolio and provide useful links.</li>
                <li><strong>Email Draft:</strong> Review and customize the email draft generated by the AI, tailored to the job postings.</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)

def handle_userinput(user_input):
    """
    Handles user input, generates a response, and updates the chat history.
    """
    # Ensure that 'conversation' and 'chat_history' are initialized in session state
    if 'conversation' not in st.session_state:
        st.session_state.conversation = None
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []

    # Display a spinner while generating a response
    with st.spinner('Generating response...'):
        try:
            # Generate the response using the conversation object
            result = st.session_state.conversation({"query": user_input})
            response = result['result']
            source = result['source_documents'][0].metadata['source']
        except Exception as e:
            st.error(f"An error occurred: {e}")
            response = "Sorry, there was an error processing your request."
            source = "N/A"

    # Append user input and response to chat history
    st.session_state.chat_history.append(user_input)
    st.session_state.chat_history.append(f"{response} \nSource Document: {source}")

    # Display chat history
    response_container = st.container()

    with response_container:
        for i, message in enumerate(st.session_state.chat_history):
            if i % 2 == 0:
                st.write(f"**User:** {message}")
            else:
                st.write(f"**Response:** {message}")

def create_streamlit_app(llm, portfolio, clean_text):
    """
    Sets up the main functionality of the Streamlit app.
    
    Parameters:
    - llm: Language model instance (e.g., Chain object).
    - portfolio: Instance of the Portfolio class.
    - clean_text: Function for cleaning up text.
    """
    # Input field for URL or plain text
    user_input = st.text_input("Please provide a valid URL or job description:")

    if st.button("Submit"):
        if user_input:
            handle_userinput(user_input)
        else:
            st.warning("Please enter a query before submitting.")

if __name__ == "__main__":
    # Initialize components
    chain = Chain()
    portfolio = Portfolio()
    
    # Display sidebar
    sidebar()
    
    # Run the Streamlit app
    create_streamlit_app(chain, portfolio, clean_text)
