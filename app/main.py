import streamlit as st  # type: ignore # Import Streamlit
# Imports the Streamlit library and assigns it the alias 'st'. 
# Streamlit is used for creating interactive web apps.
# The '# type: ignore' comment suppresses type checking warnings for this line.

from langchain_community.document_loaders import WebBaseLoader # type: ignore
# Imports the WebBaseLoader class from the langchain_community.document_loaders module.
# This class is likely used to load and process content from web URLs.
# The '# type: ignore' comment suppresses type checking warnings for this line.

from chains import Chain
# Imports the Chain class from the chains module.
# This class is probably used for processing or handling data in the application.

from portfolio import Portfolio
# Imports the Portfolio class from the portfolio module.
# This class is likely used to manage or query portfolio data.

from utils import clean_text
# Imports the clean_text function from the utils module.
# This function is used to preprocess or clean up text data.

# Configure the Streamlit page
st.set_page_config(
    layout="wide",
    page_title="Cloud Email Generator",
    page_icon="ðŸ“§"
)
# Sets up the configuration for the Streamlit app's page.
# 'layout="wide"' makes the layout wide, providing more horizontal space.
# 'page_title="Cloud Email Generator"' sets the title that appears in the browser tab.
# 'page_icon="ðŸ“§"' sets the icon for the browser tab.

def sidebar():
    """
    Sets up the sidebar with a logo, caption, title, description, and step-by-step guide using custom HTML and CSS.
    """
    # Display the logo in the sidebar
    st.sidebar.image(
        r'C:\Users\SURESH BEEKHANI\Desktop\project-genai-cold-email-generator\imgs\img.png', 
        use_column_width=True
    )
    # Displays an image in the sidebar with the path specified.
    # 'use_column_width=True' ensures the image uses the full width of the sidebar.

    # Center the title in the sidebar with custom HTML and CSS
    st.sidebar.markdown("""
        <style>
        .sidebar-title {
            text-align: center;
            font-size: 34px;
            font-weight: bold;
        }
        </style>
        <div class="sidebar-title">
            Cloud Email Generator
        </div>
        """, unsafe_allow_html=True)
    # Adds custom HTML and CSS to the sidebar for styling.
    # The title 'Cloud Email Generator' is centered and styled with specified font size and weight.
    # 'unsafe_allow_html=True' allows the inclusion of raw HTML in Streamlit components.

    # Add a description and step-by-step guide below the title
    st.sidebar.markdown("""
        <style>
        .sidebar-description {
            text-align: center;
            font-size: 20px;
            margin-top: 20px;
        }
        .sidebar-steps {
            text-align: left;
            font-size: 18px;
            margin-top: 20px;
            line-height: 1.6;
        }
        </style>
        <div class="sidebar-description">
            This tool helps you generate personalized cold emails quickly and effectively. 
            Input your details, and let the AI do the rest, crafting compelling messages 
            tailored to your needs.
        </div>
        <div class="sidebar-steps">
            <h3>How It Works:</h3>
            <ol>
                <li><strong>Provide Details:</strong> Enter a valid URL or a job description into the input field.</li>
                <li><strong>Processing:</strong> The tool will load and process the information, cleaning and extracting key details.</li>
                <li><strong>AI Analysis:</strong> The AI will analyze the extracted details and generate a list of relevant job postings.</li>
                <li><strong>Skill Matching:</strong> The tool will match required skills with your portfolio and provide useful links.</li>
                <li><strong>Email Draft:</strong> Review and customize the email draft generated by the AI, tailored to the job postings.</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)
    # Adds a description and step-by-step guide to the sidebar with custom HTML and CSS.
    # The steps are listed in an ordered list with headings and bold text for emphasis.

    
def create_streamlit_app(llm, portfolio, clean_text):
    """
    Sets up the main functionality of the Streamlit app.
    
    Parameters:
    - llm: Language model instance (e.g., Chain object).
    - portfolio: Instance of the Portfolio class.
    - clean_text: Function for cleaning up text.
    """
    # Input field for URL or plain text
    user_input = st.chat_input("Please provide a valid URL or job description:")
    # Creates an input field in the app where users can provide a URL or job description.

    if user_input:
        try:
            if user_input.startswith(('http://', 'https://')):
                # Load and process data from URL
                loader = WebBaseLoader([user_input])
                # Creates an instance of WebBaseLoader with the URL provided by the user.
                page_content = loader.load().pop().page_content
                # Loads the content from the URL and retrieves the page content.
                data = clean_text(page_content)
                # Cleans the page content using the clean_text function.
            else:
                # Use the provided plain text
                data = clean_text(user_input)
                # Cleans the plain text provided by the user.

            # Load portfolio and extract job details
            portfolio.load_portfolio()
            # Loads portfolio data using the Portfolio instance.
            jobs = llm.extract_jobs(data)
            # Extracts job details from the cleaned data using the Chain instance (llm).

            if jobs:
                for job in jobs:
                    # Extract required skills and query portfolio
                    skills = job.get('skills', [])
                    # Retrieves skills required for the job from the job details.
                    links = portfolio.query_links(skills)
                    # Queries the portfolio for links related to the required skills.

                    # Generate email draft
                    email = llm.write_mail(job, links)
                    # Generates an email draft based on the job details and relevant links.

                    st.code(email.title().strip(), language="Markdown")
                    # Displays the email draft in the app using Markdown formatting.
                    # 'email.title().strip()' ensures the email title is capitalized and whitespace is removed.
            else:
                st.warning("Warning: No job postings were found in the content you provided. Please ensure that your submission includes valid information and includes the following details: role, experience, skills, and description.")
                # Displays a warning message if no job postings were found in the provided content.

        except Exception as e:
            st.error(f"An error occurred: {e}")
            # Displays an error message if an exception occurs during processing.

if __name__ == "__main__":
    # Initialize components
    chain = Chain()
    # Creates an instance of the Chain class.

    portfolio = Portfolio()
    # Creates an instance of the Portfolio class.

    # Display sidebar
    sidebar()
    # Calls the sidebar function to display the sidebar.

    # Run the Streamlit app
    create_streamlit_app(chain, portfolio, clean_text)
    # Calls the create_streamlit_app function to set up the main functionality of the app,
    # passing the Chain instance, Portfolio instance, and clean_text function as parameters.