__import__('pysqlite3')
import sys
sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')

import streamlit as st  # Import Streamlit for creating the web app
from langchain_community.document_loaders import WebBaseLoader  # Import WebBaseLoader for processing web content
from chains import Chain  # Import Chain for processing or handling data
from portfolio import Portfolio  # Import Portfolio for managing or querying portfolio data
from utils import clean_text  # Import clean_text for preprocessing text data

# Configure the Streamlit page
st.set_page_config(
    layout="wide",  # Use a wide layout
    page_title="Cloud Email Generator",  # Set the page title
    page_icon="ðŸ“§"  # Set the page icon
)
st.title('My Streamlit App')

def sidebar():
    """
    Sets up the sidebar with a logo, title, description, and step-by-step guide.
    """
    # Display the logo
    st.sidebar.image(
        r'imgs/img.png',  # Path to the logo image
        use_column_width=True
    )

    # Add a centered title with custom HTML and CSS
    st.sidebar.markdown("""
        <style>
        .sidebar-title {
            text-align: center;
            font-size: 34px;
            font-weight: bold;
        }
        </style>
        <div class="sidebar-title">
            Cloud Email Generator
        </div>
        """, unsafe_allow_html=True)

    # Add a description and step-by-step guide
    st.sidebar.markdown("""
        <style>
        .sidebar-description {
            text-align: center;
            font-size: 20px;
            margin-top: 20px;
        }
        .sidebar-steps {
            text-align: left;
            font-size: 18px;
            margin-top: 20px;
            line-height: 1.6;
        }
        </style>
        <div class="sidebar-description">
            This tool helps you generate personalized cold emails quickly and effectively. 
            Input your details, and let the AI do the rest, crafting compelling messages 
            tailored to your needs.
        </div>
        <div class="sidebar-steps">
            <h3>How It Works:</h3>
            <ol>
                <li><strong>Provide Details:</strong> Enter a valid URL or a job description into the input field.</li>
                <li><strong>Processing:</strong> The tool will load and process the information, cleaning and extracting key details.</li>
                <li><strong>AI Analysis:</strong> The AI will analyze the extracted details and generate a list of relevant job postings.</li>
                <li><strong>Skill Matching:</strong> The tool will match required skills with your portfolio and provide useful links.</li>
                <li><strong>Email Draft:</strong> Review and customize the email draft generated by the AI, tailored to the job postings.</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)

def create_streamlit_app(llm, portfolio, clean_text):
    """
    Sets up the main functionality of the Streamlit app.
    
    Parameters:
    - llm: Language model instance (e.g., Chain object).
    - portfolio: Instance of the Portfolio class.
    - clean_text: Function for cleaning up text.
    """
    # Input field for URL or plain text
    user_input = st.chat_input("Please provide a valid URL or job description:")

    if user_input:
        try:
            if user_input.startswith(('http://', 'https://')):
                # Load and process data from URL
                loader = WebBaseLoader([user_input])
                page_content = loader.load().pop().page_content
                data = clean_text(page_content)
            else:
                # Use the provided plain text
                data = clean_text(user_input)

            # Load portfolio and extract job details
            portfolio.load_portfolio()
            jobs = llm.extract_jobs(data)

            if jobs:
                for job in jobs:
                    # Extract required skills and query portfolio
                    skills = job.get('skills', [])
                    links = portfolio.query_links(skills)

                    # Generate email draft
                    email = llm.write_mail(job, links)

                    # Display the email draft and user input
                    st.write("```markdown\n" + email + "\n```")
                    st.write("```markdown\n" + user_input + "\n```")
            else:
                st.warning("Warning: No job postings were found in the content you provided. Please ensure that your submission includes valid information and includes details such as role, experience, skills, and description.")

        except Exception as e:
            st.error(f"An error occurred: {e}")

if __name__ == "__main__":
    # Initialize components
    chain = Chain()
    portfolio = Portfolio()

    # Display sidebar
    sidebar()

    # Run the Streamlit app
    create_streamlit_app(chain, portfolio, clean_text) 
