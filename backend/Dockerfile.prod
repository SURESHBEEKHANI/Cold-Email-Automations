# Ultra-optimized production Dockerfile
FROM python:3.13-alpine AS base

# Install only essential runtime dependencies
RUN apk add --no-cache \
    libffi \
    openssl \
    && rm -rf /var/cache/apk/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install build tools
RUN pip install --upgrade pip setuptools wheel

# Install only production dependencies
COPY pyproject.toml ./
RUN pip install --no-cache-dir --no-deps \
    fastapi \
    uvicorn[standard] \
    pydantic \
    langchain \
    langchain-community \
    langchain-groq \
    crewai \
    chromadb \
    pandas \
    python-dotenv \
    requests

# Create minimal production image
FROM python:3.13-alpine AS production

# Copy only runtime dependencies
COPY --from=base /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install minimal runtime packages
RUN apk add --no-cache \
    libffi \
    openssl \
    && rm -rf /var/cache/apk/* \
    && find /opt/venv -type d -name "__pycache__" -exec rm -rf {} + \
    && find /opt/venv -type f -name "*.pyc" -delete \
    && find /opt/venv -type f -name "*.pyo" -delete

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy only necessary application files
COPY --chown=appuser:appgroup main.py ./
COPY --chown=appuser:appgroup src/ ./src/

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/health', timeout=5)" || exit 1

# Run with optimized settings
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"] 